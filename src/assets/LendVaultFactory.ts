/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.5
*/

import { ContractFactory, decompressBytecode } from "fuels";
import type { Provider, Account, DeployContractOptions, DeployContractResult } from "fuels";

import { LendVault } from "./LendVault";

const bytecode = decompressBytecode("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");

export class LendVaultFactory extends ContractFactory {

  static readonly bytecode = bytecode;

  constructor(accountOrProvider: Account | Provider) {
    super(bytecode, LendVault.abi, accountOrProvider);
  }

  static async deploy (
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<DeployContractResult<LendVault>> {
    const factory = new LendVaultFactory(wallet);

    return factory.deploy({
      storageSlots: LendVault.storageSlots,
      ...options,
    });
  }
}
